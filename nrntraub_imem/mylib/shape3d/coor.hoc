objref  pop_base, realistic_coorz[cells_type], ret


{pop_base = new Vector()
pop_base.integral(Num_pop,1).add(-1)}

suppyrRS_base = -1
suppyrFRB_base = pop_base.x(0) 
supbask_base = pop_base.x(1) 
supaxax_base = pop_base.x(2) 
supLTS_base = pop_base.x(3) 
spinstell_base = pop_base.x(4) 
tuftIB_base = pop_base.x(5)
tuftRS_base = pop_base.x(6)
nontuftRS_base = pop_base.x(7)
deepbask_base = pop_base.x(8)
deepaxax_base = pop_base.x(9)
deepLTS_base = pop_base.x(10)
TCR_base = pop_base.x(11)
nRT_base = pop_base.x(12)





column_radious = column_width/2

objref randobjr, randobj0

{randobjr = new Random()
randobjr.uniform(4/column_radious,1)
randobjr.MCellRan4(12345)
randobj0 = new Random()
randobj0.uniform(0,1)
randobj0.MCellRan4(4000)}


obfunc random_from_dens_function(){local i,a localobj ve,dens,f, rev_f, tiny_step, res
	
	ve = $o1
	dens = $o2 // probability density function
	f = new Vector()
	f.integral(dens,1) //cumulative distribution function

	tiny_step = new Vector()
	rev_f = new Vector()
	tiny_step.indgen(ve.min(), ve.max(),0.01 )
	rev_f.interpolate(tiny_step,ve,f)

	res = new Vector($3)

	for i = 0,$3-1{
        // pick random value acording to cdf
		a = randobj0.repick() 
		res.x(i) = tiny_step.x(rev_f.cl.add(-a).abs().min_ind())
	}

return res	
}

proc define_pops_position(){ localobj file

if ( strcmp(position_style.s, "traub") == 0 ) {
    depth_cell.append(-300, -300, -300, -300, -300, -1400, -1500, -1500, -1500, -1700, -1700, -1700, -5000, -5100)
    spread_cell.append(-1100, -1100, -1100, -1100, -1100, -300,	-400, -400,	-800, -1200, -1200,	-1200, -100, -100)
    }else{
     if (strcmp(position_style.s, "myposition") == 0 ){
        file = new File( pops_position_file)
        file.ropen()
        for i = 0, cells_type-1{
            depth_cell.append(file.scanvar())
            }
        for i = 0, cells_type-1{
            spread_cell.append(file.scanvar())
            }
        file.close()
        }
        
    }
}
    

obfunc calculate_coorz_for_realistc_case(){localobj  dens,dens_tmp,f
    //realistic_random_dens - file with probability density function

    if ( strcmp(position_style.s, "realistic") != 0 ) { return realistic_coorz}

    dens = new Matrix()
    dens_tmp = new Vector()
    open_file_to_read("",realistic_random_dens,f) 
    dens.scanf(f)
    f.close()

	for j = 0,cells_type - 3{
	    dens.getrow(j,dens_tmp)
        //get random numbers from the probability density function
	    realistic_coorz[j]= random_from_dens_function(ve,dens_tmp,Num_pop.x(j))
	    }
	    realistic_coorz[cells_type - 2] = new Vector(Num_pop.x(12), -5000)
	    realistic_coorz[cells_type - 1] = new Vector(Num_pop.x(13), -5100)

    return realistic_coorz
}


if ( strcmp(position_style.s, "realistic") == 0 ){
    calculate_coorz_for_realistc_case()
    }else{
    define_pops_position()  //pops borders
    }


obfunc give_coor(){ local num_pop 

	ret = new Vector()
	num_pop = $1
	num_cells = $2


	if ( strcmp(position_style.s, "traub") == 0 ) {
        
		return   ret.append(0, 0,0, depth_cell.x(num_pop)+(spread_cell.x(num_pop)/2))

	}else{
	    alpha_ = randobj0.repick()*2*PI
	    beta_ = randobj0.repick()*2*PI
	    r = sqrt(randobjr.repick())*column_radious
	    coorx = r*cos(beta_)
	    coory = r*sin(beta_)

	    if ( strcmp(position_style.s, "realistic") == 0 ) {
            coorz = realistic_coorz[num_pop].x[num_cells]
		    }else{
	        coorz = randobj0.repick()*spread_cell.x(num_pop)+  depth_cell.x(num_pop)
            }	
	    return ret.append(alpha_,coorx, coory, coorz)
	    }
}


proc create_cells(){local i, alpha_, coorx, coory, coorz, beta, r localobj coor 

	strdef proc_exec

	if (pmesg) print "creating ", $s2

	for i=0, $3-1 {
		coor = give_coor($1, i)
	   if (serial) {
	     cell_append(execute("new %s(%20.10e)",$s2, coor.x(0)), coor.x(2), coor.x(3), coor.x(1))
	   } else {
	    sprint(proc_exec,"cell_append(new %s(%20.10e),%20.10e, %20.10e,%20.10e)",$s2, coor.x(0), coor.x(2), coor.x(3), coor.x(1))
	     par_create(proc_exec)
	   }
	   base_ = base_ + 1
	}

print base_ , $s2
}

load_file("mylib/shape3d/extra_shapes.hoc")

/*
func cell_append() {
        cells.append($o1)
        $o1{print secname(), "WWWWWWWWWWWWW"}
        print secname()
        //basic_shape($o1)
        position_3d($o1,$2,$3,$4)
        print secname(), "RRRRRRRRRRRRR"
        //position_3d($o1,$2,$3,$4)

        if ((pc.id <-1) ) {

                forall{
                print secname(), x3d(0), y3d(0), z3d(0), diam3d(0), x3d(1), y3d(1), z3d(1), diam3d(1), x3d(2), y3d(2), z3d(2), diam3d(2), "\n"

                        }
                        }
        return cells.count - 1
}

*/
